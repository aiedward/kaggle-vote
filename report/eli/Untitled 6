Short Exercises
1. abbabba => 12235
a: 1
b: 2
ab: 3
bb: 4
ba: 5
abb: 6

2. 131241 => aabababa
a: 1
b: 2
ab: 3
ab : 4
aa: 5
ba: 6

3. 
Definition 1: Given a set of symbols s1, …, sn, a frequency function freq 
that assigns a positive frequency to each symbol, and a prefix code that 
such that bits(s) is the number of bits used to represent each character s, 
the weight of the code is defined to be the sum of the freq(s)*bits(s) terms 
summed over all n symbols. 

Huffman’s Theorem:  The Huffman compression algorithm finds a prefix code 
with minimum total weight.

Lemma 1:  Every prefix code has a corresponding binary tree in which each 
leaf of the tree is labeled by a symbol and the depth of that leaf 
corresponds to the number of bits used for that symbol in the given 
prefix code:

Proof: Every valid prefix code has the property that all encodings for each symbol start with a different prefix. By labeling each branch of a tree with 0 or 1 and placing a symbol at each leaf node, every symbol has a different prefix code represented by the path from the root note down to the leaf. 

Definition 2:  For a binary tree T corresponding to a prefix code, we let 
weight(T) denote the sum of the terms freq(s)*depth(s) where depth(s) is the 
depth of leaf s (which, by Lemma 1, corresponds to the number of bits 
used to encode s).

Lemma 2:  There exists an optimal prefix code in which the two symbols of 
lowest frequency s1 and s2 are siblings in the corresponding binary tree 
for that code.

Proof: Let us assume for contradiction that s1 and s2 are leaves in a different location in the tree. Let a and b be two characters that are sibling leaves of maximum depth. Then it is trivial to see that by swapping s1 and a, s2 and b we get a more optimum tree. 

Lemma 3:  Given a tree T with leaves s1, s2, …, sn and a tree T’ with 
leaves alpha, s3, …, sn where freq(alpha) = freq(s1) + freq(s2), 
weight(T) = weight(T’) + freq(s1) + freq(s2).

Proof: s1 and s2 are one level deeper in T. Hence, weight(T) = weight(T’) + freq(s1) + freq(s2).


Proof of Huffman’s Theorem:  

The proof is by induction on n, the number of symbols in the alphabet.

Basis:  

Induction hypothesis:  

Induction step:

(Please use the notation T’_huffman for the Huffman tree for alphabet 
alpha, s3, …, sn), T_huffman for the Huffman tree for the alphabet 
s1, … sn, T_better for the putative tree/code that is assumed to be better 
than T_huffman and T’_better for the other tree that you’ll need to introduce).